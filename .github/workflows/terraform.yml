name: Terraform Apply and Destroy

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'destroy'
        type: choice
        options:
          - destroy

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  terraform:
    name: Terraform Apply or Destroy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::211125784755:role/uc1-alb-oidc
         # role-session-name: github-assume
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

#      - name: Install TFLint
#        run: |
#          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
#
#      - name: Run TFLint
#        continue-on-error: true
#        run: |
#          tflint --init
#          tflint --recursive
#
#      # Install Checkov.
#      - name: Install Checkov
#        run: |
#          python -m pip install --upgrade pip
#          pip install checkov
#
#      # Run Checkov to scan Terraform files.
#      - name: Run Checkov Scan
#        continue-on-error: true
#        run: |
#          checkov -d ./ --skip-path .github/* --soft-fail    # Scan the current directory for Terraform files.

      - name: Terraform Init
        id: init
        run: terraform init
       
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -recursive

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        if: github.ref == 'refs/heads/main' && (github.event_name == 'pull_request' || github.event_name == 'push')
       # if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false -lock=false

#      - name: Install terraform-docs
#        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#        run: |
#          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
#          tar -xzf terraform-docs.tar.gz
#          chmod +x terraform-docs
#          sudo mv terraform-docs /usr/local/bin/
#
#      - name: Generate Terraform Docs and Commit
#        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#        run: |
#          git config --local user.email "niyazzz1996@gmail.com"
#          git config --local user.name "niyaz-hasan"
#
#          echo "--- Generating terraform-docs ---"
#          terraform-docs markdown . > README.md.new
#          mv README.md.new README.md
#
#          if [ -f README.md ]; then
#            git add README.md
#            if git commit -m "docs: Update README.md"; then
#              git push
#              echo "Successfully committed and pushed README.md changes."
#            else
#              echo "No README.md changes to commit."
#            fi
#          else
#            echo "README.md was not generated."
#          fi
#
#
#      - name: Update Pull Request
#        uses: actions/github-script@v7
#        if: github.event_name == 'pull_request'
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
#            #### Terraform Initialization \`${{ steps.init.outcome }}\`
#            #### Terraform Validation \`${{ steps.validate.outcome }}\`
#            #### Terraform Plan \`${{ steps.plan.outcome }}\`
#
#            <details><summary>Show Plan</summary>
#
#            \`\`\`\n
#            ${process.env.PLAN}
#            \`\`\`
#
#            </details>
#
#            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })

      - name: Terraform Apply
        if: contains(github.event.head_commit.message, 'terraform apply')
        run: terraform apply -auto-approve 

      - name: Terraform Destroy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve -lock=false
